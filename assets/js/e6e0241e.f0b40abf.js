"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2217],{12623:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var o=n(83117),i=n(80102),a=(n(67294),n(3905)),r=["components"],s={title:"Writing good CL descriptions",description:"CL\u63cf\u8ff0\u662f\u4e00\u4e2a\u516c\u5f00\u7684\u8bb0\u5f55\uff0c\u8bf4\u660e\u6b63\u5728\u8fdb\u884c\u4fee\u8ba2\u7684\u53d8\u5316\u548c\u539f\u56e0\uff0c\u6539\u8fdb\u63cf\u8ff0\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801review\u9ad8\u6548\u4fbf\u6377\u3002",slug:"/blog/tools/Writing-good-CL-descriptions",authors:"RiverMountain",tags:["git","github"],keywords:["git"],date:"2023/05/25",hide_table_of_contents:!1,last_update:{date:"2023/05/25"}},l=void 0,d={permalink:"/blog/tools/Writing-good-CL-descriptions",editUrl:"https://github.com/wrm244/wikiblog/edit/main/blog/tools/Writing good CL descriptions.md",source:"@site/blog/tools/Writing good CL descriptions.md",title:"Writing good CL descriptions",description:"CL\u63cf\u8ff0\u662f\u4e00\u4e2a\u516c\u5f00\u7684\u8bb0\u5f55\uff0c\u8bf4\u660e\u6b63\u5728\u8fdb\u884c\u4fee\u8ba2\u7684\u53d8\u5316\u548c\u539f\u56e0\uff0c\u6539\u8fdb\u63cf\u8ff0\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801review\u9ad8\u6548\u4fbf\u6377\u3002",date:"2023-05-25T00:00:00.000Z",formattedDate:"2023\u5e745\u670825\u65e5",tags:[{label:"git",permalink:"/tags/git"},{label:"github",permalink:"/tags/github"}],readingTime:4.486666666666666,hasTruncateMarker:!0,authors:[{name:"\u6cb3\u5c71",title:"RiverMountain",url:"https://github.com/wrm244",email:"wrm244@139.com",imageURL:"/avatar.png",key:"RiverMountain"}],frontMatter:{title:"Writing good CL descriptions",description:"CL\u63cf\u8ff0\u662f\u4e00\u4e2a\u516c\u5f00\u7684\u8bb0\u5f55\uff0c\u8bf4\u660e\u6b63\u5728\u8fdb\u884c\u4fee\u8ba2\u7684\u53d8\u5316\u548c\u539f\u56e0\uff0c\u6539\u8fdb\u63cf\u8ff0\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801review\u9ad8\u6548\u4fbf\u6377\u3002",slug:"/blog/tools/Writing-good-CL-descriptions",authors:"RiverMountain",tags:["git","github"],keywords:["git"],date:"2023/05/25",hide_table_of_contents:!1,last_update:{date:"2023/05/25"}},prevItem:{title:"\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u5c31\u4e1a\u8003\u7814\u7814\u8ba8\u4f1a(\u8003\u516c\u8003\u7814\u7bc7)",permalink:"/blog/\u7814\u8ba8\u4f1a\u8003\u516c\u8003\u7814"},nextItem:{title:"\u8fdc\u7a0b\u684c\u9762\u7684\u65b0\u8ba4\u8bc6",permalink:"/blog/tools/remote-desktop"}},u={authorsImageUrls:[void 0]},c=[{value:"First Line",id:"firstline",level:2},{value:"Body is Informative",id:"informative",level:2},{value:"Bad CL Descriptions",id:"bad",level:2},{value:"Good CL Descriptions",id:"good",level:2},{value:"Functionality change",id:"functionality-change",level:3},{value:"Refactoring",id:"refactoring",level:3},{value:"Small CL that needs some context",id:"small-cl-that-needs-some-context",level:3},{value:"Using tags",id:"tags",level:2},{value:"Generated CL descriptions",id:"generated-cl-descriptions",level:2},{value:"Review the description before submitting the CL",id:"review-the-description-before-submitting-the-cl",level:2}],h={toc:c},p="wrapper";function m(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)(p,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"CL\u63cf\u8ff0\u662f\u4e00\u4e2a\u516c\u5f00\u7684\u8bb0\u5f55\uff0c\u8bf4\u660e\u6b63\u5728\u8fdb\u884c\u4fee\u8ba2\u7684\u53d8\u5316\u548c\u539f\u56e0\u3002\u5b83\u5c06\u6210\u4e3a\u6211\u4eec\u7248\u672c\u63a7\u5236\u8bb0\u5f55\u7684\u4e00\u4e2a\u6c38\u4e45\u90e8\u5206\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u5728\u8fd1\u4e9b\u5e74\u91cc\u88ab\u4f60\u7684\u5ba1\u67e5\u5458\u4ee5\u5916\u7684\u6570\u767e\u4eba\u9605\u8bfb\u3002\n\u672a\u6765\u7684\u5f00\u53d1\u8005\u4f1a\u6839\u636e\u5b83\u7684\u63cf\u8ff0\u6765\u641c\u7d22\u4f60\u7684CL\u3002\u672a\u6765\u7684\u4eba\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5bf9\u4f60\u7684\u53d8\u5316\u6709\u5fae\u5f31\u7684\u8bb0\u5fc6\u800c\u5bfb\u627e\u4f60\u7684\u53d8\u5316\ufe50\u4f46\u5374\u6ca1\u6709\u65b9\u4fbf\u7684\u5177\u4f53\u7ec6\u8282\u3002\u5982\u679c\u6240\u6709\u7684\u91cd\u8981\u4fe1\u606f\u90fd\u662f\u5728\u4ee3\u7801\u4e2d\ufe50\u800c\u4e0d\u662f\u5728\u63cf\u8ff0\u4e2d\ufe50\u4ed6\u4eec\u8981\u627e\u5230\u4f60\u7684CL\u5c31\u4f1a\u56f0\u96be\u5f88\u591a\u3002"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A CL description is a public record of ",(0,a.kt)("strong",{parentName:"p"},"what")," change is being made and ",(0,a.kt)("strong",{parentName:"p"},"why"),"\nit was made. It will become a permanent part of our version control history, and\nwill possibly be read by hundreds of people other than your reviewers over the\nyears.\nFuture developers will search for your CL based on its description. Someone in\nthe future might be looking for your change because of a faint memory of its\nrelevance but without the specifics handy. If all the important information is\nin the code and not the description, it's going to be a lot harder for them to\nlocate your CL.")),(0,a.kt)("h2",{id:"firstline"},"First Line"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Short summary of what is being done."),(0,a.kt)("li",{parentName:"ul"},"Complete sentence, written as though it was an order."),(0,a.kt)("li",{parentName:"ul"},"Follow by empty line.")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"first line")," of a CL description should be a short summary of\n",(0,a.kt)("em",{parentName:"p"},"specifically")," ",(0,a.kt)("strong",{parentName:"p"},"what")," ",(0,a.kt)("em",{parentName:"p"},"is being done by the CL"),", followed by a blank line.\nThis is what appears in version control history summaries, so it should be\ninformative enough that future code searchers don't have to read your CL or its\nwhole description to understand what your CL actually ",(0,a.kt)("em",{parentName:"p"},"did")," or how it differs\nfrom other CLs. That is, the first line should stand alone, allowing readers to\nskim through code history much faster."),(0,a.kt)("p",null,"Try to keep your first line short, focused, and to the point. The clarity and\nutility to the reader should be the top concern."),(0,a.kt)("p",null,'By tradition, the first line of a CL description is a complete sentence, written\nas though it were an order (an imperative sentence). For example, say\n\\"',(0,a.kt)("strong",{parentName:"p"},"Delete")," the FizzBuzz RPC and ",(0,a.kt)("strong",{parentName:"p"},"replace"),' it with the new system." instead\nof \\"',(0,a.kt)("strong",{parentName:"p"},"Deleting")," the FizzBuzz RPC and ",(0,a.kt)("strong",{parentName:"p"},"replacing")," it with the new system.\"\nYou don't have to write the rest of the description as an imperative sentence,\nthough."),(0,a.kt)("h2",{id:"informative"},"Body is Informative"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"#firstline"},"first line")," should be a short, focused summary, while the rest\nof the description should fill in the details and include any supplemental\ninformation a reader needs to understand the changelist holistically. It might\ninclude a brief description of the problem that's being solved, and why this is\nthe best approach. If there are any shortcomings to the approach, they should be\nmentioned. If relevant, include background information such as bug numbers,\nbenchmark results, and links to design documents."),(0,a.kt)("p",null,"If you include links to external resources consider that they may not be visible\nto future readers due to access restrictions or retention policies. Where\npossible include enough context for reviewers and future readers to understand\nthe CL."),(0,a.kt)("p",null,"Even small CLs deserve a little attention to detail. Put the CL in context."),(0,a.kt)("h2",{id:"bad"},"Bad CL Descriptions"),(0,a.kt)("p",null,'"Fix bug" is an inadequate CL description. What bug? What did you do to fix it?\nOther similarly bad descriptions include:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'"Fix build."'),(0,a.kt)("li",{parentName:"ul"},'"Add patch."'),(0,a.kt)("li",{parentName:"ul"},'"Moving code from A to B."'),(0,a.kt)("li",{parentName:"ul"},'"Phase 1."'),(0,a.kt)("li",{parentName:"ul"},'"Add convenience functions."'),(0,a.kt)("li",{parentName:"ul"},'"kill weird URLs."')),(0,a.kt)("p",null,"Some of those are real CL descriptions. Although short, they do not provide\nenough useful information."),(0,a.kt)("h2",{id:"good"},"Good CL Descriptions"),(0,a.kt)("p",null,"Here are some examples of good descriptions."),(0,a.kt)("h3",{id:"functionality-change"},"Functionality change"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"rpc: remove size limit on RPC server message freelist."),(0,a.kt)("p",{parentName:"blockquote"},"Servers like FizzBuzz have very large messages and would benefit from reuse.\nMake the freelist larger, and add a goroutine that frees the freelist entries\nslowly over time, so that idle servers eventually release all freelist\nentries.")),(0,a.kt)("p",null,"The first few words describe what the CL actually does. The rest of the\ndescription talks about the problem being solved, why this is a good solution,\nand a bit more information about the specific implementation."),(0,a.kt)("h3",{id:"refactoring"},"Refactoring"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Construct a Task with a TimeKeeper to use its TimeStr and Now methods."),(0,a.kt)("p",{parentName:"blockquote"},"Add a Now method to Task, so the borglet() getter method can be removed (which\nwas only used by OOMCandidate to call borglet's Now method). This replaces the\nmethods on Borglet that delegate to a TimeKeeper."),(0,a.kt)("p",{parentName:"blockquote"},"Allowing Tasks to supply Now is a step toward eliminating the dependency on\nBorglet. Eventually, collaborators that depend on getting Now from the Task\nshould be changed to use a TimeKeeper directly, but this has been an\naccommodation to refactoring in small steps."),(0,a.kt)("p",{parentName:"blockquote"},"Continuing the long-range goal of refactoring the Borglet Hierarchy.")),(0,a.kt)("p",null,"The first line describes what the CL does and how this is a change from the\npast. The rest of the description talks about the specific implementation, the\ncontext of the CL, that the solution isn't ideal, and possible future direction.\nIt also explains ",(0,a.kt)("em",{parentName:"p"},"why")," this change is being made."),(0,a.kt)("h3",{id:"small-cl-that-needs-some-context"},"Small CL that needs some context"),(0,a.kt)("p",null,"Example:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Create a Python3 build rule for status.py."),(0,a.kt)("p",{parentName:"blockquote"},"This allows consumers who are already using this as in Python3 to depend on a\nrule that is next to the original status build rule instead of somewhere in\ntheir own tree. It encourages new consumers to use Python3 if they can,\ninstead of Python2, and significantly simplifies some automated build file\nrefactoring tools being worked on currently.")),(0,a.kt)("p",null,"The first sentence describes what's actually being done. The rest of the\ndescription explains ",(0,a.kt)("em",{parentName:"p"},"why")," the change is being made and gives the reviewer a lot\nof context."),(0,a.kt)("h2",{id:"tags"},"Using tags"),(0,a.kt)("p",null,"Tags are manually entered labels that can be used to categorize CLs. These may\nbe supported by tools or just used by team convention."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'"',"[tag]",'"'),(0,a.kt)("li",{parentName:"ul"},'"',"[a longer tag]",'"'),(0,a.kt)("li",{parentName:"ul"},'"#tag"'),(0,a.kt)("li",{parentName:"ul"},'"tag:"')),(0,a.kt)("p",null,"Using tags is optional."),(0,a.kt)("p",null,"When adding tags, consider whether they should be in the ",(0,a.kt)("a",{parentName:"p",href:"#informative"},"body")," of\nthe CL description or the ",(0,a.kt)("a",{parentName:"p",href:"#firstline"},"first line"),". Limit the usage of tags in\nthe first line, as this can obscure the content."),(0,a.kt)("p",null,"Examples with and without tags:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-{.good}"},"// Tags are okay in the first line if kept short.\n[banana] Peel the banana before eating.\n\n// Tags can be inlined in content.\nPeel the #banana before eating.\n\n// Tags are optional.\nPeel the banana before eating.\n\n// Multiple tags are acceptable if kept short.\n#banana #apple: Assemble a fruit basket.\n\n// Tags can go anywhere in the CL description.\n> Assemble a fruit basket.\n>\n> #banana #apple\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-{.bad}"},"// Too many tags (or tags that are too long) overwhelm the first line.\n//\n// Instead, consider whether the tags can be moved into the description body\n// and/or shortened.\n[banana peeler factory factory][apple picking service] Assemble a fruit basket.\n")),(0,a.kt)("h2",{id:"generated-cl-descriptions"},"Generated CL descriptions"),(0,a.kt)("p",null,"Some CLs are generated by tools. Whenever possible, their descriptions should\nalso follow the advice here. That is, their first line should be short, focused,\nand stand alone, and the CL description body should include informative details\nthat help reviewers and future code searchers understand each CL's effect."),(0,a.kt)("h2",{id:"review-the-description-before-submitting-the-cl"},"Review the description before submitting the CL"),(0,a.kt)("p",null,"CLs can undergo significant change during review. It can be worthwhile to review\na CL description before submitting the CL, to ensure that the description still\nreflects what the CL does."))}m.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(n),p=i,m=c["".concat(l,".").concat(p)]||c[p]||h[p]||a;return n?o.createElement(m,r(r({ref:t},u),{},{components:n})):o.createElement(m,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);